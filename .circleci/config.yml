# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
orbs:
  # Choose either one of the orbs below
  # Declare a dependency on the welcome-orb
  # welcome: circleci/welcome-orb@0.4.1
  aws-cli: circleci/aws-cli@2.0.3

default_containers: &defaultCon
  docker:
  - image: cimg/base:stable
### COmmands:
commands: # a reusable command with parameters
  print_pipeline_id:
    parameters:
      to:
        type: string
        default: "No provided ID"
    steps:
      - run: echo << parameters.to >>
  
    # Exercise - Rollback
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  say-hello:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    <<: *defaultCon
    # A<<: *defaultCondd steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"

  print_hello:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    <<: *defaultCon
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello Ragobaaaaaaaaaa"

  print_world:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    <<: *defaultCon
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Say World"
          command: "echo World!"


  print_my_name:
    <<: *defaultCon
    steps:
      - checkout
      - run:
          name: "Print My name"
          command: "echo $coder_name>> logs"
      - run:
          name: "Print My logs"
          command: "cat logs"
      - run:
          name: "echo an env var that is part of our project"
          command: |
            echo $coder_name


  save_hello_world_output:
    <<: *defaultCon
    steps:
      - checkout
      - run:
          name: "Echo text to file"
          command: |
            echo "Echoing some text to file" > ~/my_file.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - my_file.txt


  print_output_file:
    <<: *defaultCon
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/data
      - run: cat /tmp/data/my_file.txt

  test_command_in_job:
    <<: *defaultCon
    steps:
      - checkout
      - print_pipeline_id :
          to: ${CIRCLE_WORKFLOW_ID}
            
  create_infrastructure: 
    docker:
      - image: amazon/aws-cli
    steps:
      # - run: apk add --update openssh-client git
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file template.yml \
              --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
              --region us-east-1
      - run:
          name: Build inventory file
          command: |
            echo [all] > inventory
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> inventory
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory
      
      - destroy_environment
  # Exercise: Config and Deployment
  configure_infrastructure: 
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
              # You can get this ID in the section where you registered the SSH Key
              fingerprints: ["5e:5b:b7:bf:cb:0b:2a:1f:51:fd:89:01:b8:73:f9:a8"] 
      - run:
          name: Install Ansible
          command: |
            # Install Ansible
            apk add --update ansible
      - attach_workspace:
          at: ~/myinv
      - run:
          name: Run Playbook and Configure server
          command: |
            # Your command
            ansible-playbook -i ~/myinv/inventory main.yml


  
  test_on_fail_step:
    <<: *defaultCon
    steps:
      - checkout
      - run: exit 1

      - run:
          name: Test on Fail
          command: echo "Hello Error!"
          when: on_fail

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  ansible_00:
    jobs:
      # - say-hello
      # - print_hello
      # - print_world:
      #     requires:
      #     - print_hello
      # - print_my_name:
      #     requires:
      #       - print_world
      # - save_hello_world_output
      # - print_output_file:
      #     requires:
      #       - save_hello_world_output
      # - test_command_in_job
      # - test_on_fail_step
      - create_infrastructure
      - configure_infrastructure:
          requires:
            - create_infrastructure
      
